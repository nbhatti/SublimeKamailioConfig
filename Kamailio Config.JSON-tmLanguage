{
    "patterns": [
        {
            "name": "keyword.command.serCoreFunction", 
            "match": "\\b(?i)(?:forward|forward_tcp|forward_udp|forward_tls|forward_sctp|send|send_tcp|log|error|exec|force_rport|add_rport|force_tcp_alias|add_tcp_alias|udp_mtu|udp_mtu_try_proto|setflag|resetflag|isflagset|flags|bool|setavpflag|resetavpflag|isavpflagset|avpflags|rewritehost|sethost|seth|rewritehostport|sethostport|sethp|rewritehostporttrans|sethostporttrans|sethpt|rewriteuser|setuser|setu|rewriteuserpass|setuserpass|setup|rewriteport|setport|setp|rewriteuri|seturi|revert_uri|prefix|strip|strip_tail|userphone|append_branch|set_advertised_address|set_advertised_port|force_send_socket|contained)\\b"
        }, 
        {
            "name": "keyword.command.serCoreFunction", 
            "match": "\\b(?i)(?:af|dst_ip|dst_port|from_uri|method|msg:len|proto|status|snd_af|snd_ip|snd_port|snd_proto|src_ip|src_port|to_af|to_ip|to_port|to_proto|to_uri|uri|uri:host|uri:port|contained)\\b"
        }, 
        {
            "name": "keyword.command.serCoreFunction", 
            "match": "\\b(?i)(?:debug|fork|log_stderror|log_facility|listen|alias|auto_aliases|dns|rev_dns|dns_try_ipv6|dns_try_naptr|dns_srv_lb|dns_srv_loadbalancing|dns_udp_pref|dns_udp_preference|dns_tcp_pref|dns_tcp_preference|dns_tls_pref|dns_tls_preference|dns_sctp_pref|dns_sctp_preference|dns_retr_time|dns_retr_no|dns_servers_no|dns_use_search_list|dns_search_full_match|dns_cache_init|use_dns_cache|use_dns_failover|dns_cache_flags|dns_cache_negative_ttl|dns_cache_min_ttl|dns_cache_max_ttl|dns_cache_mem|dns_cache_gc_interval|dns_cache_del_nonexp|dns_cache_delete_nonexpired|dst_blacklist_init|use_dst_blacklist|dst_blacklist_mem|dst_blacklist_expire|dst_blacklist_ttl|dst_blacklist_gc_interval|port|statistics|maxbuffer|children|check_via|phone2tel|syn_branch|memlog|mem_log|memdbg|mem_dbg|sip_warning|server_signature|reply_to_via|user|uid|group|gid|chroot|workdir|wdir|mhomed|disable_tcp|tcp_children|tcp_accept_aliases|tcp_send_timeout|tcp_connect_timeout|tcp_connection_lifetime|tcp_poll_method|tcp_max_connections|tcp_no_connect|tcp_source_ipv4|tcp_source_ipv6|tcp_fd_cache|tcp_buf_write|tcp_async|tcp_conn_wq_max|tcp_wq_max|tcp_rd_buf_size|tcp_wq_blk_size|tcp_defer_accept|tcp_delayed_ack|tcp_syncnt|tcp_linger2|tcp_keepalive|tcp_keepidle|tcp_keepintvl|tcp_keepcnt|tcp_crlf_ping|disable_tls|tls_disable|enable_tls|tls_enable|tlslog|tls_log|tls_port_no|tls_method|tls_verify|tls_require_certificate|tls_certificate|tls_private_key|tls_ca_list|tls_handshake_timeout|tls_send_timeout|disable_sctp|enable_sctp|sctp_children|sctp_socket_rcvbuf|sctp_socket_receive_buffer|sctp_socket_sndbuf|sctp_socket_send_buffer|sctp_autoclose|sctp_send_ttl|sctp_send_retries|advertised_address|advertised_port|disable_core_dump|open_files_limit|shm_force_alloc|mlock_pages|real_time|rt_prio|rt_policy|rt_timer1_prio|rt_fast_timer_prio|rt_ftimer_prio|rt_timer1_policy|rt_ftimer_policy|rt_timer2_prio|rt_stimer_prio|rt_timer2_policy|rt_stimer_policy|mcast_loopback|mcast_ttl|tos|pmtu_discovery|exit_timeout|ser_kill_timeout|max_while_loops|stun_refresh_interval|stun_allow_stun|stun_allow_fp|server_id|description|descr|desc|loadpath|mpath|contained)\\b"
        }, 
        {
            "begin": "route(\\[)(\\w)(\\])", 
            "end": "\\w{\\$", 
            "beginCaptures": {
                "0": {
                    "name": "keyword.command.serStatement"
                }, 
                "1": {
                    "name": "keyword.other.control"
                }, 
                "2": {
                    "name": "constant.language.c"
                }, 
                "3": {
                    "name": "keyword.other.control"
                }
            }
        }, 
        {
            "name": "keyword.command.serStatement", 
            "match": "\\b(?i)(?:route|if|else|switch|case|default|break|exit|return|drop|while|include_file|contained)\\b"
        }, 
        {
            "name": "keyword.command.serStatement", 
            "match": "^request_\\w+"
        }, 
        {
            "name": "comment.block.c", 
            "match": "\\s#.*"
        }, 
        {
            "name": "comment.block.c", 
            "match": "^#.*"
        }, 
        {
            "name": "constant.language.c", 
            "match": "\\b(NULL|true|false|TRUE|FALSE)\\b"
        }, 
        {
            "name": "keyword.control.conditional.if.dosbatch", 
            "match": "\\b(?i)if\\s+((not)\\s+)(#!define|#!ifdef\\s\\|#!ifndef\\s\\|#!endif\\|#!else\\|#!KAMAILIO\\|#!OPENSER\\|#!SER\\|#!MAXCOMPAT\\|#!ALL)\\b"
        }, 
        {
            "name": "keyword.control.conditional.kamailio", 
            "match": "\\b(?i)(?:route|if|else|switch|case|default|break|exit|return|drop|while|include_file|contained)\\b"
        }, 
        {
            "name": "keyword.control.repeat.dosbatch", 
            "match": "\\b(?i)for\\b"
        }, 
        {
            "name": "keyword.operator.dosbatch", 
            "match": "\\b(?:EQU|NEQ|LSS|LEQ|GTR|GEQ)\\b"
        }, 
        {
            "captures": {
                "1": {
                    "name": "keyword.command.rem.dosbatch"
                }
            }, 
            "name": "comment.line.rem.dosbatch", 
            "match": "(?:^|\\s)((?i)#)(?:$|\\s.*$)"
        }, 
        {
            "name": "comment.line.colons.dosbatch", 
            "match": "\\s*:\\s*:.*$"
        }, 
        {
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.shell"
                }
            }, 
            "begin": "\"", 
            "name": "string.quoted.double.dosbatch", 
            "end": "\"", 
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.shell"
                }
            }
        }, 
        {
            "name": "keyword.operator.pipe.dosbatch", 
            "match": "[|]"
        }, 
        {
            "name": "support.function", 
            "match": "ifdef"
        }, 
        {
            "name": "support.function", 
            "match": "loadmodule|modparam|import_file"
        }, 
        {
            "name": "keyword.control.import.define.c", 
            "match": "#!ifdef|#!ifndef|#!define|#!endif"
        }, 
        {
            "name": "keyword.operator.redirect.shell", 
            "match": "&>|\\d*>&\\d*|\\d*(>>|>|<)|\\d*<&|\\d*<>"
        }
    ], 
    "name": "Kamailio Config", 
    "uuid": "E07EC438-7B75-4437-8AA1-DA94C1E6EAHH", 
    "scopeName": "source.kamailio", 
    "fileTypes": [
        ""
    ]
}